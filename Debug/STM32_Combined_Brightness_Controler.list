
STM32_Combined_Brightness_Controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048c8  080048c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048c8  080048c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080048dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080048dc  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001130b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227b  00000000  00000000  00031347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000335c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00034700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d74  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011abe  00000000  00000000  0005c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001082b1  00000000  00000000  0006df72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f8  00000000  00000000  00176274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080048a0 	.word	0x080048a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080048a0 	.word	0x080048a0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb37 	bl	800088e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f81a 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f964 	bl	80004f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f938 	bl	800049c <MX_DMA_Init>
  MX_TIM2_Init();
 800022c:	f000 f8d8 	bl	80003e0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000230:	f000 f85e 	bl	80002f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_buf, ADC_BUF_LEN);
 8000234:	220a      	movs	r2, #10
 8000236:	4905      	ldr	r1, [pc, #20]	; (800024c <main+0x34>)
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0x38>)
 800023a:	f000 ff7d 	bl	8001138 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	__HAL_TIM_SET_COMPARE(&htim2 ,TIM_CHANNEL_1, adc_buf[0]);
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <main+0x34>)
 8000240:	881a      	ldrh	r2, [r3, #0]
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <main+0x3c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
 8000248:	e7f9      	b.n	800023e <main+0x26>
 800024a:	bf00      	nop
 800024c:	20000140 	.word	0x20000140
 8000250:	20000028 	.word	0x20000028
 8000254:	200000f4 	.word	0x200000f4

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	; 0x50
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2238      	movs	r2, #56	; 0x38
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f004 fb12 	bl	8004890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800027a:	2000      	movs	r0, #0
 800027c:	f002 fbda 	bl	8002a34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2340      	movs	r3, #64	; 0x40
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000296:	2304      	movs	r3, #4
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800029a:	2355      	movs	r3, #85	; 0x55
 800029c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fc74 	bl	8002b9c <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ba:	f000 f973 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 ff78 	bl	80031cc <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002e2:	f000 f95f 	bl	80005a4 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3750      	adds	r7, #80	; 0x50
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08c      	sub	sp, #48	; 0x30
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2220      	movs	r2, #32
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f004 fac1 	bl	8004890 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800030e:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000310:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000316:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000318:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800031c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031e:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800032a:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000330:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000338:	2204      	movs	r2, #4
 800033a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <MX_ADC1_Init+0xe8>)
 800033e:	2200      	movs	r2, #0
 8000340:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000342:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000344:	2201      	movs	r2, #1
 8000346:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_ADC1_Init+0xe8>)
 800034a:	2201      	movs	r2, #1
 800034c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000356:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000358:	2200      	movs	r2, #0
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_ADC1_Init+0xe8>)
 800035e:	2200      	movs	r2, #0
 8000360:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000364:	2201      	movs	r2, #1
 8000366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_ADC1_Init+0xe8>)
 800036c:	2200      	movs	r2, #0
 800036e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	4817      	ldr	r0, [pc, #92]	; (80003d8 <MX_ADC1_Init+0xe8>)
 800037a:	f000 fd1b 	bl	8000db4 <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000384:	f000 f90e 	bl	80005a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800038c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	; (80003d8 <MX_ADC1_Init+0xe8>)
 8000394:	f001 fd1e 	bl	8001dd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800039e:	f000 f901 	bl	80005a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_ADC1_Init+0xec>)
 80003a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a6:	2306      	movs	r3, #6
 80003a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ae:	237f      	movs	r3, #127	; 0x7f
 80003b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b2:	2304      	movs	r3, #4
 80003b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <MX_ADC1_Init+0xe8>)
 80003c0:	f000 ffac 	bl	800131c <HAL_ADC_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003ca:	f000 f8eb 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	3730      	adds	r7, #48	; 0x30
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000028 	.word	0x20000028
 80003dc:	04300002 	.word	0x04300002

080003e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f2:	463b      	mov	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <MX_TIM2_Init+0xb8>)
 8000406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800040c:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_TIM2_Init+0xb8>)
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <MX_TIM2_Init+0xb8>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000418:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_TIM2_Init+0xb8>)
 800041a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800041e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_TIM2_Init+0xb8>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_TIM2_Init+0xb8>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800042c:	481a      	ldr	r0, [pc, #104]	; (8000498 <MX_TIM2_Init+0xb8>)
 800042e:	f003 faff 	bl	8003a30 <HAL_TIM_PWM_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000438:	f000 f8b4 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000444:	f107 031c 	add.w	r3, r7, #28
 8000448:	4619      	mov	r1, r3
 800044a:	4813      	ldr	r0, [pc, #76]	; (8000498 <MX_TIM2_Init+0xb8>)
 800044c:	f004 f966 	bl	800471c <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000456:	f000 f8a5 	bl	80005a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045a:	2360      	movs	r3, #96	; 0x60
 800045c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	2200      	movs	r2, #0
 800046e:	4619      	mov	r1, r3
 8000470:	4809      	ldr	r0, [pc, #36]	; (8000498 <MX_TIM2_Init+0xb8>)
 8000472:	f003 fc47 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800047c:	f000 f892 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000480:	2100      	movs	r1, #0
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_TIM2_Init+0xb8>)
 8000484:	f003 fb2c 	bl	8003ae0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <MX_TIM2_Init+0xb8>)
 800048a:	f000 f955 	bl	8000738 <HAL_TIM_MspPostInit>

}
 800048e:	bf00      	nop
 8000490:	3728      	adds	r7, #40	; 0x28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000f4 	.word	0x200000f4

0800049c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_DMA_Init+0x50>)
 80004a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <MX_DMA_Init+0x50>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	6493      	str	r3, [r2, #72]	; 0x48
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_DMA_Init+0x50>)
 80004b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_DMA_Init+0x50>)
 80004bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <MX_DMA_Init+0x50>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6493      	str	r3, [r2, #72]	; 0x48
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_DMA_Init+0x50>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	200b      	movs	r0, #11
 80004d8:	f001 fe5f 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004dc:	200b      	movs	r0, #11
 80004de:	f001 fe76 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_GPIO_Init+0xac>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a24      	ldr	r2, [pc, #144]	; (800059c <MX_GPIO_Init+0xac>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_GPIO_Init+0xac>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_GPIO_Init+0xac>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a1e      	ldr	r2, [pc, #120]	; (800059c <MX_GPIO_Init+0xac>)
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_GPIO_Init+0xac>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0320 	and.w	r3, r3, #32
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_GPIO_Init+0xac>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <MX_GPIO_Init+0xac>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_GPIO_Init+0xac>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_GPIO_Init+0xac>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <MX_GPIO_Init+0xac>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_GPIO_Init+0xac>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <MX_GPIO_Init+0xb0>)
 800057e:	f002 f8b3 	bl	80026e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	2028      	movs	r0, #40	; 0x28
 8000588:	f001 fe07 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800058c:	2028      	movs	r0, #40	; 0x28
 800058e:	f001 fe1e 	bl	80021ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000800 	.word	0x48000800

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x44>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <HAL_MspInit+0x44>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6613      	str	r3, [r2, #96]	; 0x60
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x44>)
 80005c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x44>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_MspInit+0x44>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	6593      	str	r3, [r2, #88]	; 0x58
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_MspInit+0x44>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005e6:	f002 fac9 	bl	8002b7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09e      	sub	sp, #120	; 0x78
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2254      	movs	r2, #84	; 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f004 f939 	bl	8004890 <memset>
  if(hadc->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000626:	d15f      	bne.n	80006e8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800062c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f002 ffab 	bl	8003594 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f7ff ffae 	bl	80005a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <HAL_ADC_MspInit+0xf8>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <HAL_ADC_MspInit+0xf8>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <HAL_ADC_MspInit+0xf8>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <HAL_ADC_MspInit+0xf8>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <HAL_ADC_MspInit+0xf8>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <HAL_ADC_MspInit+0xf8>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067c:	2303      	movs	r3, #3
 800067e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f002 f82b 	bl	80026e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 8000694:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <HAL_ADC_MspInit+0x100>)
 8000696:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 800069a:	2205      	movs	r2, #5
 800069c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006ce:	f001 fd99 	bl	8002204 <HAL_DMA_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80006d8:	f7ff ff64 	bl	80005a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006e0:	655a      	str	r2, [r3, #84]	; 0x54
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_ADC_MspInit+0xfc>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e8:	bf00      	nop
 80006ea:	3778      	adds	r7, #120	; 0x78
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	20000094 	.word	0x20000094
 80006f8:	40020008 	.word	0x40020008

080006fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800070c:	d10b      	bne.n	8000726 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_TIM_PWM_MspInit+0x38>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_TIM_PWM_MspInit+0x38>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6593      	str	r3, [r2, #88]	; 0x58
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_TIM_PWM_MspInit+0x38>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000758:	d11c      	bne.n	8000794 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_TIM_MspPostInit+0x64>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_TIM_MspPostInit+0x64>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_TIM_MspPostInit+0x64>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000772:	2320      	movs	r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f001 ffaa 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8a2 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <DMA1_Channel1_IRQHandler+0x10>)
 80007fa:	f001 fe26 	bl	800244a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000094 	.word	0x20000094

08000808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800080c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000810:	f002 f8ec 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490e      	ldr	r1, [pc, #56]	; (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0b      	ldr	r4, [pc, #44]	; (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ffd7 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f003 ffed 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fcd3 	bl	8000218 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   r0, =_estack
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	080048d0 	.word	0x080048d0
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	20000158 	.word	0x20000158

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>

0800088e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f001 fc73 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f80e 	bl	80008c0 <HAL_InitTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	e001      	b.n	80008b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b0:	f7ff fe7e 	bl	80005b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b4:	79fb      	ldrb	r3, [r7, #7]

}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_InitTick+0x68>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d022      	beq.n	800091a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_InitTick+0x6c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <HAL_InitTick+0x68>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80008e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fc7e 	bl	80021ea <HAL_SYSTICK_Config>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10f      	bne.n	8000914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d809      	bhi.n	800090e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	f001 fc4a 	bl	800219a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_InitTick+0x70>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e007      	b.n	800091e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e004      	b.n	800091e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e001      	b.n	800091e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000008 	.word	0x20000008
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x1c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x20>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4413      	add	r3, r2
 8000942:	4a03      	ldr	r2, [pc, #12]	; (8000950 <HAL_IncTick+0x1c>)
 8000944:	6013      	str	r3, [r2, #0]
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	20000154 	.word	0x20000154
 8000954:	20000008 	.word	0x20000008

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000154 	.word	0x20000154

08000970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	609a      	str	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3360      	adds	r3, #96	; 0x60
 80009ea:	461a      	mov	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <LL_ADC_SetOffset+0x44>)
 80009fa:	4013      	ands	r3, r2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	4313      	orrs	r3, r2
 8000a08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a10:	bf00      	nop
 8000a12:	371c      	adds	r7, #28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	03fff000 	.word	0x03fff000

08000a20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3360      	adds	r3, #96	; 0x60
 8000a2e:	461a      	mov	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3360      	adds	r3, #96	; 0x60
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	431a      	orrs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a76:	bf00      	nop
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b087      	sub	sp, #28
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3360      	adds	r3, #96	; 0x60
 8000a92:	461a      	mov	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000aac:	bf00      	nop
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3360      	adds	r3, #96	; 0x60
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000ae2:	bf00      	nop
 8000ae4:	371c      	adds	r7, #28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	615a      	str	r2, [r3, #20]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b087      	sub	sp, #28
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3330      	adds	r3, #48	; 0x30
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	4413      	add	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	f003 031f 	and.w	r3, r3, #31
 8000b64:	211f      	movs	r1, #31
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	0e9b      	lsrs	r3, r3, #26
 8000b72:	f003 011f 	and.w	r1, r3, #31
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	f003 031f 	and.w	r3, r3, #31
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b86:	bf00      	nop
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b087      	sub	sp, #28
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3314      	adds	r3, #20
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	0e5b      	lsrs	r3, r3, #25
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	4413      	add	r3, r2
 8000bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	0d1b      	lsrs	r3, r3, #20
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	0d1b      	lsrs	r3, r3, #20
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d10a      	bne.n	8000c12 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000c10:	e00a      	b.n	8000c28 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	407f0000 	.word	0x407f0000

08000c38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f003 031f 	and.w	r3, r3, #31
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	6093      	str	r3, [r2, #8]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c8c:	d101      	bne.n	8000c92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cdc:	d101      	bne.n	8000ce2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d04:	f043 0201 	orr.w	r2, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d101      	bne.n	8000d30 <LL_ADC_IsEnabled+0x18>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <LL_ADC_IsEnabled+0x1a>
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d52:	f043 0204 	orr.w	r2, r3, #4
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d101      	bne.n	8000d7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d101      	bne.n	8000da4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e1af      	b.n	800112e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d109      	bne.n	8000df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fc0b 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff3f 	bl	8000c78 <LL_ADC_IsDeepPowerDownEnabled>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff25 	bl	8000c54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff5a 	bl	8000cc8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d115      	bne.n	8000e46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff3e 	bl	8000ca0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e24:	4b9f      	ldr	r3, [pc, #636]	; (80010a4 <HAL_ADC_Init+0x2f0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	099b      	lsrs	r3, r3, #6
 8000e2a:	4a9f      	ldr	r2, [pc, #636]	; (80010a8 <HAL_ADC_Init+0x2f4>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	099b      	lsrs	r3, r3, #6
 8000e32:	3301      	adds	r3, #1
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e38:	e002      	b.n	8000e40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f9      	bne.n	8000e3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff3c 	bl	8000cc8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10d      	bne.n	8000e72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5a:	f043 0210 	orr.w	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff75 	bl	8000d66 <LL_ADC_REG_IsConversionOngoing>
 8000e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f040 8148 	bne.w	800111c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 8144 	bne.w	800111c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e9c:	f043 0202 	orr.w	r2, r3, #2
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff35 	bl	8000d18 <LL_ADC_IsEnabled>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d141      	bne.n	8000f38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ebc:	d004      	beq.n	8000ec8 <HAL_ADC_Init+0x114>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <HAL_ADC_Init+0x2f8>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d10f      	bne.n	8000ee8 <HAL_ADC_Init+0x134>
 8000ec8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ecc:	f7ff ff24 	bl	8000d18 <LL_ADC_IsEnabled>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	4876      	ldr	r0, [pc, #472]	; (80010ac <HAL_ADC_Init+0x2f8>)
 8000ed4:	f7ff ff20 	bl	8000d18 <LL_ADC_IsEnabled>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4323      	orrs	r3, r4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	e012      	b.n	8000f0e <HAL_ADC_Init+0x15a>
 8000ee8:	4871      	ldr	r0, [pc, #452]	; (80010b0 <HAL_ADC_Init+0x2fc>)
 8000eea:	f7ff ff15 	bl	8000d18 <LL_ADC_IsEnabled>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4870      	ldr	r0, [pc, #448]	; (80010b4 <HAL_ADC_Init+0x300>)
 8000ef2:	f7ff ff11 	bl	8000d18 <LL_ADC_IsEnabled>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	431c      	orrs	r4, r3
 8000efa:	486f      	ldr	r0, [pc, #444]	; (80010b8 <HAL_ADC_Init+0x304>)
 8000efc:	f7ff ff0c 	bl	8000d18 <LL_ADC_IsEnabled>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4323      	orrs	r3, r4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d012      	beq.n	8000f38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f1a:	d004      	beq.n	8000f26 <HAL_ADC_Init+0x172>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a62      	ldr	r2, [pc, #392]	; (80010ac <HAL_ADC_Init+0x2f8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Init+0x176>
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <HAL_ADC_Init+0x308>)
 8000f28:	e000      	b.n	8000f2c <HAL_ADC_Init+0x178>
 8000f2a:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_ADC_Init+0x30c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f7ff fd1c 	bl	8000970 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7f5b      	ldrb	r3, [r3, #29]
 8000f3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000f48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000f4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d106      	bne.n	8000f74 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	045b      	lsls	r3, r3, #17
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d009      	beq.n	8000f90 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <HAL_ADC_Init+0x310>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fed1 	bl	8000d66 <LL_ADC_REG_IsConversionOngoing>
 8000fc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fede 	bl	8000d8c <LL_ADC_INJ_IsConversionOngoing>
 8000fd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d17f      	bne.n	80010d8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d17c      	bne.n	80010d8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fe2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ffa:	f023 0302 	bic.w	r3, r3, #2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	430b      	orrs	r3, r1
 8001006:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d017      	beq.n	8001040 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800101e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001028:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800102c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6911      	ldr	r1, [r2, #16]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	430b      	orrs	r3, r1
 800103a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800103e:	e013      	b.n	8001068 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800104e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001064:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106e:	2b01      	cmp	r3, #1
 8001070:	d12a      	bne.n	80010c8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001088:	4311      	orrs	r1, r2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800108e:	4311      	orrs	r1, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001094:	430a      	orrs	r2, r1
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	611a      	str	r2, [r3, #16]
 80010a2:	e019      	b.n	80010d8 <HAL_ADC_Init+0x324>
 80010a4:	20000000 	.word	0x20000000
 80010a8:	053e2d63 	.word	0x053e2d63
 80010ac:	50000100 	.word	0x50000100
 80010b0:	50000400 	.word	0x50000400
 80010b4:	50000500 	.word	0x50000500
 80010b8:	50000600 	.word	0x50000600
 80010bc:	50000300 	.word	0x50000300
 80010c0:	50000700 	.word	0x50000700
 80010c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10c      	bne.n	80010fa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f023 010f 	bic.w	r1, r3, #15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	1e5a      	subs	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
 80010f8:	e007      	b.n	800110a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 020f 	bic.w	r2, r2, #15
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
 800111a:	e007      	b.n	800112c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	f043 0210 	orr.w	r2, r3, #16
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800112c:	7ffb      	ldrb	r3, [r7, #31]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop

08001138 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114c:	d004      	beq.n	8001158 <HAL_ADC_Start_DMA+0x20>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a5a      	ldr	r2, [pc, #360]	; (80012bc <HAL_ADC_Start_DMA+0x184>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_ADC_Start_DMA+0x24>
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_ADC_Start_DMA+0x188>)
 800115a:	e000      	b.n	800115e <HAL_ADC_Start_DMA+0x26>
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <HAL_ADC_Start_DMA+0x18c>)
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fd6a 	bl	8000c38 <LL_ADC_GetMultimode>
 8001164:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fdfb 	bl	8000d66 <LL_ADC_REG_IsConversionOngoing>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 809b 	bne.w	80012ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Start_DMA+0x4e>
 8001182:	2302      	movs	r3, #2
 8001184:	e096      	b.n	80012b4 <HAL_ADC_Start_DMA+0x17c>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a4d      	ldr	r2, [pc, #308]	; (80012c8 <HAL_ADC_Start_DMA+0x190>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d008      	beq.n	80011aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d002      	beq.n	80011aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b09      	cmp	r3, #9
 80011a8:	d17a      	bne.n	80012a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 fcf6 	bl	8001b9c <ADC_Enable>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d16d      	bne.n	8001296 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a3a      	ldr	r2, [pc, #232]	; (80012bc <HAL_ADC_Start_DMA+0x184>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d009      	beq.n	80011ec <HAL_ADC_Start_DMA+0xb4>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <HAL_ADC_Start_DMA+0x194>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d002      	beq.n	80011e8 <HAL_ADC_Start_DMA+0xb0>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <HAL_ADC_Start_DMA+0xb8>
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <HAL_ADC_Start_DMA+0x198>)
 80011ea:	e001      	b.n	80011f0 <HAL_ADC_Start_DMA+0xb8>
 80011ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d002      	beq.n	80011fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	f023 0206 	bic.w	r2, r3, #6
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	661a      	str	r2, [r3, #96]	; 0x60
 8001222:	e002      	b.n	800122a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <HAL_ADC_Start_DMA+0x19c>)
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001236:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <HAL_ADC_Start_DMA+0x1a0>)
 8001238:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	4a27      	ldr	r2, [pc, #156]	; (80012dc <HAL_ADC_Start_DMA+0x1a4>)
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	221c      	movs	r2, #28
 8001248:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0210 	orr.w	r2, r2, #16
 8001260:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3340      	adds	r3, #64	; 0x40
 800127c:	4619      	mov	r1, r3
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f001 f867 	bl	8002354 <HAL_DMA_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd55 	bl	8000d3e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001294:	e00d      	b.n	80012b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800129e:	e008      	b.n	80012b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80012ac:	e001      	b.n	80012b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012ae:	2302      	movs	r3, #2
 80012b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	50000100 	.word	0x50000100
 80012c0:	50000300 	.word	0x50000300
 80012c4:	50000700 	.word	0x50000700
 80012c8:	50000600 	.word	0x50000600
 80012cc:	50000500 	.word	0x50000500
 80012d0:	50000400 	.word	0x50000400
 80012d4:	08001c61 	.word	0x08001c61
 80012d8:	08001d39 	.word	0x08001d39
 80012dc:	08001d55 	.word	0x08001d55

080012e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0b6      	sub	sp, #216	; 0xd8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x24>
 800133a:	2302      	movs	r3, #2
 800133c:	f000 bc13 	b.w	8001b66 <HAL_ADC_ConfigChannel+0x84a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fd0a 	bl	8000d66 <LL_ADC_REG_IsConversionOngoing>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	f040 83f3 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6859      	ldr	r1, [r3, #4]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f7ff fbe7 	bl	8000b3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fcf8 	bl	8000d66 <LL_ADC_REG_IsConversionOngoing>
 8001376:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd04 	bl	8000d8c <LL_ADC_INJ_IsConversionOngoing>
 8001384:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001388:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 81d9 	bne.w	8001744 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001392:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 81d4 	bne.w	8001744 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013a4:	d10f      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fbee 	bl	8000b92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fb95 	bl	8000aee <LL_ADC_SetSamplingTimeCommonConfig>
 80013c4:	e00e      	b.n	80013e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	461a      	mov	r2, r3
 80013d4:	f7ff fbdd 	bl	8000b92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fb85 	bl	8000aee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d022      	beq.n	800144c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6919      	ldr	r1, [r3, #16]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001416:	f7ff fadf 	bl	80009d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	461a      	mov	r2, r3
 8001428:	f7ff fb2b 	bl	8000a82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6919      	ldr	r1, [r3, #16]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	7f1b      	ldrb	r3, [r3, #28]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x126>
 800143c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001440:	e000      	b.n	8001444 <HAL_ADC_ConfigChannel+0x128>
 8001442:	2300      	movs	r3, #0
 8001444:	461a      	mov	r2, r3
 8001446:	f7ff fb37 	bl	8000ab8 <LL_ADC_SetOffsetSaturation>
 800144a:	e17b      	b.n	8001744 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fae4 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10a      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x15c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fad9 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	0e9b      	lsrs	r3, r3, #26
 8001472:	f003 021f 	and.w	r2, r3, #31
 8001476:	e01e      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x19a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff face 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800149a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800149e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80014a6:	2320      	movs	r3, #32
 80014a8:	e004      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80014aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x1b2>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	0e9b      	lsrs	r3, r3, #26
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	e018      	b.n	8001500 <HAL_ADC_ConfigChannel+0x1e4>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80014e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80014ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80014f2:	2320      	movs	r3, #32
 80014f4:	e004      	b.n	8001500 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80014f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001500:	429a      	cmp	r2, r3
 8001502:	d106      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fa9d 	bl	8000a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2101      	movs	r1, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fa81 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <HAL_ADC_ConfigChannel+0x222>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa76 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	0e9b      	lsrs	r3, r3, #26
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	e01e      	b.n	800157c <HAL_ADC_ConfigChannel+0x260>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fa6b 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800155c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800156c:	2320      	movs	r3, #32
 800156e:	e004      	b.n	800157a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x278>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0e9b      	lsrs	r3, r3, #26
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	e018      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x2aa>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80015a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80015b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80015b8:	2320      	movs	r3, #32
 80015ba:	e004      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80015bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d106      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	2101      	movs	r1, #1
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fa3a 	bl	8000a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2102      	movs	r1, #2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa1e 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10a      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x2e8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2102      	movs	r1, #2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fa13 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	0e9b      	lsrs	r3, r3, #26
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	e01e      	b.n	8001642 <HAL_ADC_ConfigChannel+0x326>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2102      	movs	r1, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa08 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800162a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001632:	2320      	movs	r3, #32
 8001634:	e004      	b.n	8001640 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <HAL_ADC_ConfigChannel+0x33e>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0e9b      	lsrs	r3, r3, #26
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	e016      	b.n	8001688 <HAL_ADC_ConfigChannel+0x36c>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800166c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800166e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800167a:	2320      	movs	r3, #32
 800167c:	e004      	b.n	8001688 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800167e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001688:	429a      	cmp	r2, r3
 800168a:	d106      	bne.n	800169a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f9d9 	bl	8000a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2103      	movs	r1, #3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff f9bd 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x3aa>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2103      	movs	r1, #3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f9b2 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	0e9b      	lsrs	r3, r3, #26
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	e017      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x3da>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2103      	movs	r1, #3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f9a7 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80016de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80016e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80016e8:	2320      	movs	r3, #32
 80016ea:	e003      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80016ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <HAL_ADC_ConfigChannel+0x3f2>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0e9b      	lsrs	r3, r3, #26
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	e011      	b.n	8001732 <HAL_ADC_ConfigChannel+0x416>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800171c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800171e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001726:	2320      	movs	r3, #32
 8001728:	e003      	b.n	8001732 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800172a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001732:	429a      	cmp	r2, r3
 8001734:	d106      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	2103      	movs	r1, #3
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f984 	bl	8000a4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fae5 	bl	8000d18 <LL_ADC_IsEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 813d 	bne.w	80019d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	461a      	mov	r2, r3
 8001764:	f7ff fa40 	bl	8000be8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4aa2      	ldr	r2, [pc, #648]	; (80019f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f040 812e 	bne.w	80019d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <HAL_ADC_ConfigChannel+0x480>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	3301      	adds	r3, #1
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2b09      	cmp	r3, #9
 8001792:	bf94      	ite	ls
 8001794:	2301      	movls	r3, #1
 8001796:	2300      	movhi	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e019      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x4b4>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80017aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80017ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e003      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80017b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2b09      	cmp	r3, #9
 80017c8:	bf94      	ite	ls
 80017ca:	2301      	movls	r3, #1
 80017cc:	2300      	movhi	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d079      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x4d4>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0e9b      	lsrs	r3, r3, #26
 80017e6:	3301      	adds	r3, #1
 80017e8:	069b      	lsls	r3, r3, #26
 80017ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ee:	e015      	b.n	800181c <HAL_ADC_ConfigChannel+0x500>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80017fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001800:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	e003      	b.n	8001814 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	069b      	lsls	r3, r3, #26
 8001818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_ADC_ConfigChannel+0x520>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0e9b      	lsrs	r3, r3, #26
 800182e:	3301      	adds	r3, #1
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	e017      	b.n	800186c <HAL_ADC_ConfigChannel+0x550>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800184a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800184e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001854:	2320      	movs	r3, #32
 8001856:	e003      	b.n	8001860 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3301      	adds	r3, #1
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	ea42 0103 	orr.w	r1, r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10a      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x576>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	3301      	adds	r3, #1
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	051b      	lsls	r3, r3, #20
 8001890:	e018      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x5a8>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80018aa:	2320      	movs	r3, #32
 80018ac:	e003      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80018ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018c4:	430b      	orrs	r3, r1
 80018c6:	e07e      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x5c8>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e9b      	lsrs	r3, r3, #26
 80018da:	3301      	adds	r3, #1
 80018dc:	069b      	lsls	r3, r3, #26
 80018de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e2:	e015      	b.n	8001910 <HAL_ADC_ConfigChannel+0x5f4>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	e003      	b.n	8001908 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	069b      	lsls	r3, r3, #26
 800190c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x614>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0e9b      	lsrs	r3, r3, #26
 8001922:	3301      	adds	r3, #1
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	e017      	b.n	8001960 <HAL_ADC_ConfigChannel+0x644>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	61fb      	str	r3, [r7, #28]
  return result;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001948:	2320      	movs	r3, #32
 800194a:	e003      	b.n	8001954 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	ea42 0103 	orr.w	r1, r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_ADC_ConfigChannel+0x670>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	3301      	adds	r3, #1
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	3b1e      	subs	r3, #30
 8001984:	051b      	lsls	r3, r3, #20
 8001986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198a:	e01b      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x6a8>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	613b      	str	r3, [r7, #16]
  return result;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80019a4:	2320      	movs	r3, #32
 80019a6:	e003      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f003 021f 	and.w	r2, r3, #31
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	3b1e      	subs	r3, #30
 80019be:	051b      	lsls	r3, r3, #20
 80019c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c4:	430b      	orrs	r3, r1
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	6892      	ldr	r2, [r2, #8]
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f8e1 	bl	8000b92 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_ADC_ConfigChannel+0x6e0>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80be 	beq.w	8001b5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e6:	d004      	beq.n	80019f2 <HAL_ADC_ConfigChannel+0x6d6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_ADC_ConfigChannel+0x6e4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x6ec>
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_ADC_ConfigChannel+0x6e8>)
 80019f4:	e009      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x6ee>
 80019f6:	bf00      	nop
 80019f8:	407f0000 	.word	0x407f0000
 80019fc:	80080000 	.word	0x80080000
 8001a00:	50000100 	.word	0x50000100
 8001a04:	50000300 	.word	0x50000300
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_ADC_ConfigChannel+0x854>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe ffd6 	bl	80009bc <LL_ADC_GetCommonPathInternalCh>
 8001a10:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_ADC_ConfigChannel+0x858>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0x70c>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_ADC_ConfigChannel+0x85c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d13a      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d134      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3c:	d005      	beq.n	8001a4a <HAL_ADC_ConfigChannel+0x72e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_ADC_ConfigChannel+0x860>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f040 8085 	bne.w	8001b54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a52:	d004      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x742>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_ADC_ConfigChannel+0x864>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x746>
 8001a5e:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_ADC_ConfigChannel+0x868>)
 8001a60:	e000      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x748>
 8001a62:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <HAL_ADC_ConfigChannel+0x854>)
 8001a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7fe ff91 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <HAL_ADC_ConfigChannel+0x86c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	4a44      	ldr	r2, [pc, #272]	; (8001b8c <HAL_ADC_ConfigChannel+0x870>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a8e:	e002      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f9      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a9c:	e05a      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <HAL_ADC_ConfigChannel+0x874>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d125      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x7d8>
 8001aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11f      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <HAL_ADC_ConfigChannel+0x864>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d104      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x7ac>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a34      	ldr	r2, [pc, #208]	; (8001b94 <HAL_ADC_ConfigChannel+0x878>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d047      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad0:	d004      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x7c0>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <HAL_ADC_ConfigChannel+0x864>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x7c4>
 8001adc:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_ADC_ConfigChannel+0x868>)
 8001ade:	e000      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x7c6>
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_ADC_ConfigChannel+0x854>)
 8001ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aea:	4619      	mov	r1, r3
 8001aec:	4610      	mov	r0, r2
 8001aee:	f7fe ff52 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001af2:	e031      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_ADC_ConfigChannel+0x87c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d12d      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d127      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <HAL_ADC_ConfigChannel+0x864>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d022      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1c:	d004      	beq.n	8001b28 <HAL_ADC_ConfigChannel+0x80c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_ADC_ConfigChannel+0x864>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x810>
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <HAL_ADC_ConfigChannel+0x868>)
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x812>
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_ADC_ConfigChannel+0x854>)
 8001b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f7fe ff2c 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
 8001b3e:	e00c      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001b52:	e002      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	37d8      	adds	r7, #216	; 0xd8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	50000700 	.word	0x50000700
 8001b74:	c3210000 	.word	0xc3210000
 8001b78:	90c00010 	.word	0x90c00010
 8001b7c:	50000600 	.word	0x50000600
 8001b80:	50000100 	.word	0x50000100
 8001b84:	50000300 	.word	0x50000300
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	053e2d63 	.word	0x053e2d63
 8001b90:	c7520000 	.word	0xc7520000
 8001b94:	50000500 	.word	0x50000500
 8001b98:	cb840000 	.word	0xcb840000

08001b9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f8b5 	bl	8000d18 <LL_ADC_IsEnabled>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d14d      	bne.n	8001c50 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <ADC_Enable+0xc0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e039      	b.n	8001c52 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f884 	bl	8000cf0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001be8:	f7fe feb6 	bl	8000958 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bee:	e028      	b.n	8001c42 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f88f 	bl	8000d18 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f873 	bl	8000cf0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c0a:	f7fe fea5 	bl	8000958 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d914      	bls.n	8001c42 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d00d      	beq.n	8001c42 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	f043 0210 	orr.w	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e007      	b.n	8001c52 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d1cf      	bne.n	8001bf0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	8000003f 	.word	0x8000003f

08001c60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d14b      	bne.n	8001d12 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d021      	beq.n	8001cd8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ff3b 	bl	8000b14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d032      	beq.n	8001d0a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d12b      	bne.n	8001d0a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d11f      	bne.n	8001d0a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd6:	e018      	b.n	8001d0a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d111      	bne.n	8001d0a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fae8 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d10:	e00e      	b.n	8001d30 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff faf2 	bl	8001308 <HAL_ADC_ErrorCallback>
}
 8001d24:	e004      	b.n	8001d30 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fad4 	bl	80012f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	f043 0204 	orr.w	r2, r3, #4
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff fac4 	bl	8001308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LL_ADC_IsEnabled>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <LL_ADC_IsEnabled+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_ADC_IsEnabled+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_REG_IsConversionOngoing>:
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d101      	bne.n	8001dc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b0a1      	sub	sp, #132	; 0x84
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0e7      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e0a:	d102      	bne.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	e009      	b.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6e      	ldr	r2, [pc, #440]	; (8001fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001e1c:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	e001      	b.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0be      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ffb1 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 8001e4c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffab 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80a0 	bne.w	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 809c 	bne.w	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e70:	d004      	beq.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001e7e:	e000      	b.n	8001e82 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001e80:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d04b      	beq.n	8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9e:	035b      	lsls	r3, r3, #13
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a45      	ldr	r2, [pc, #276]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10f      	bne.n	8001edc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001ebc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ec0:	f7ff ff62 	bl	8001d88 <LL_ADC_IsEnabled>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	4841      	ldr	r0, [pc, #260]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001ec8:	f7ff ff5e 	bl	8001d88 <LL_ADC_IsEnabled>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001edc:	483c      	ldr	r0, [pc, #240]	; (8001fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001ede:	f7ff ff53 	bl	8001d88 <LL_ADC_IsEnabled>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	483b      	ldr	r0, [pc, #236]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001ee6:	f7ff ff4f 	bl	8001d88 <LL_ADC_IsEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	431c      	orrs	r4, r3
 8001eee:	483c      	ldr	r0, [pc, #240]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001ef0:	f7ff ff4a 	bl	8001d88 <LL_ADC_IsEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4323      	orrs	r3, r4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d056      	beq.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f0e:	f023 030f 	bic.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	6892      	ldr	r2, [r2, #8]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f20:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f22:	e047      	b.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f38:	d004      	beq.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001f44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f48:	f7ff ff1e 	bl	8001d88 <LL_ADC_IsEnabled>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	481f      	ldr	r0, [pc, #124]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f50:	f7ff ff1a 	bl	8001d88 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e012      	b.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001f66:	f7ff ff0f 	bl	8001d88 <LL_ADC_IsEnabled>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4819      	ldr	r0, [pc, #100]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001f6e:	f7ff ff0b 	bl	8001d88 <LL_ADC_IsEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	431c      	orrs	r4, r3
 8001f76:	481a      	ldr	r0, [pc, #104]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001f78:	f7ff ff06 	bl	8001d88 <LL_ADC_IsEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4323      	orrs	r3, r4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f96:	f023 030f 	bic.w	r3, r3, #15
 8001f9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f9e:	e009      	b.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3784      	adds	r7, #132	; 0x84
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	50000100 	.word	0x50000100
 8001fd0:	50000400 	.word	0x50000400
 8001fd4:	50000500 	.word	0x50000500
 8001fd8:	50000300 	.word	0x50000300
 8001fdc:	50000700 	.word	0x50000700
 8001fe0:	50000600 	.word	0x50000600

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff40 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff90 	bl	80020d8 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5f 	bl	8002084 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa4 	bl	8002140 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e08d      	b.n	8002332 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_DMA_Init+0x138>)
 800221e:	429a      	cmp	r2, r3
 8002220:	d80f      	bhi.n	8002242 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4b45      	ldr	r3, [pc, #276]	; (8002340 <HAL_DMA_Init+0x13c>)
 800222a:	4413      	add	r3, r2
 800222c:	4a45      	ldr	r2, [pc, #276]	; (8002344 <HAL_DMA_Init+0x140>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	009a      	lsls	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_DMA_Init+0x144>)
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
 8002240:	e00e      	b.n	8002260 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_DMA_Init+0x148>)
 800224a:	4413      	add	r3, r2
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_DMA_Init+0x140>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a3c      	ldr	r2, [pc, #240]	; (8002350 <HAL_DMA_Init+0x14c>)
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f9b6 	bl	8002624 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c0:	d102      	bne.n	80022c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_DMA_Init+0x104>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d80c      	bhi.n	8002308 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f9d6 	bl	80026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e008      	b.n	800231a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40020407 	.word	0x40020407
 8002340:	bffdfff8 	.word	0xbffdfff8
 8002344:	cccccccd 	.word	0xcccccccd
 8002348:	40020000 	.word	0x40020000
 800234c:	bffdfbf8 	.word	0xbffdfbf8
 8002350:	40020400 	.word	0x40020400

08002354 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_DMA_Start_IT+0x20>
 8002370:	2302      	movs	r3, #2
 8002372:	e066      	b.n	8002442 <HAL_DMA_Start_IT+0xee>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d155      	bne.n	8002434 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f8fb 	bl	80025a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 020e 	orr.w	r2, r2, #14
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00f      	b.n	80023ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 020a 	orr.w	r2, r2, #10
 80023ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002420:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e005      	b.n	8002440 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002440:	7dfb      	ldrb	r3, [r7, #23]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2204      	movs	r2, #4
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d026      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x7a>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d021      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0204 	bic.w	r2, r2, #4
 800249c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2104      	movs	r1, #4
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d071      	beq.n	800259e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80024c2:	e06c      	b.n	800259e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2202      	movs	r2, #2
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02e      	beq.n	8002536 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d029      	beq.n	8002536 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020a 	bic.w	r2, r2, #10
 80024fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2102      	movs	r1, #2
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d038      	beq.n	800259e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002534:	e033      	b.n	800259e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2208      	movs	r2, #8
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02a      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d025      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020e 	bic.w	r2, r2, #14
 8002562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
}
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d108      	bne.n	8002608 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002606:	e007      	b.n	8002618 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002634:	429a      	cmp	r2, r3
 8002636:	d802      	bhi.n	800263e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e001      	b.n	8002642 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002640:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3b08      	subs	r3, #8
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	009a      	lsls	r2, r3, #2
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	461a      	mov	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a0b      	ldr	r2, [pc, #44]	; (800269c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800266e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2201      	movs	r2, #1
 8002678:	409a      	lsls	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40020407 	.word	0x40020407
 8002690:	40020800 	.word	0x40020800
 8002694:	40020820 	.word	0x40020820
 8002698:	cccccccd 	.word	0xcccccccd
 800269c:	40020880 	.word	0x40020880

080026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	1000823f 	.word	0x1000823f
 80026e4:	40020940 	.word	0x40020940

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026f6:	e15a      	b.n	80029ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2101      	movs	r1, #1
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 814c 	beq.w	80029a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d005      	beq.n	8002728 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002724:	2b02      	cmp	r3, #2
 8002726:	d130      	bne.n	800278a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800275e:	2201      	movs	r2, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 0201 	and.w	r2, r3, #1
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b03      	cmp	r3, #3
 8002794:	d017      	beq.n	80027c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d123      	bne.n	800281a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	6939      	ldr	r1, [r7, #16]
 8002816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0203 	and.w	r2, r3, #3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a6 	beq.w	80029a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285c:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <HAL_GPIO_Init+0x2e4>)
 800285e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002860:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <HAL_GPIO_Init+0x2e4>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6613      	str	r3, [r2, #96]	; 0x60
 8002868:	4b58      	ldr	r3, [pc, #352]	; (80029cc <HAL_GPIO_Init+0x2e4>)
 800286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002874:	4a56      	ldr	r2, [pc, #344]	; (80029d0 <HAL_GPIO_Init+0x2e8>)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	089b      	lsrs	r3, r3, #2
 800287a:	3302      	adds	r3, #2
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800289e:	d01f      	beq.n	80028e0 <HAL_GPIO_Init+0x1f8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_GPIO_Init+0x2ec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d019      	beq.n	80028dc <HAL_GPIO_Init+0x1f4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_GPIO_Init+0x2f0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_GPIO_Init+0x1f0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_GPIO_Init+0x2f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00d      	beq.n	80028d4 <HAL_GPIO_Init+0x1ec>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a49      	ldr	r2, [pc, #292]	; (80029e0 <HAL_GPIO_Init+0x2f8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x1e8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_GPIO_Init+0x2fc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_GPIO_Init+0x1e4>
 80028c8:	2305      	movs	r3, #5
 80028ca:	e00a      	b.n	80028e2 <HAL_GPIO_Init+0x1fa>
 80028cc:	2306      	movs	r3, #6
 80028ce:	e008      	b.n	80028e2 <HAL_GPIO_Init+0x1fa>
 80028d0:	2304      	movs	r3, #4
 80028d2:	e006      	b.n	80028e2 <HAL_GPIO_Init+0x1fa>
 80028d4:	2303      	movs	r3, #3
 80028d6:	e004      	b.n	80028e2 <HAL_GPIO_Init+0x1fa>
 80028d8:	2302      	movs	r3, #2
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0x1fa>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_GPIO_Init+0x1fa>
 80028e0:	2300      	movs	r3, #0
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	4093      	lsls	r3, r2
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f2:	4937      	ldr	r1, [pc, #220]	; (80029d0 <HAL_GPIO_Init+0x2e8>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002900:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <HAL_GPIO_Init+0x300>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002924:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_GPIO_Init+0x300>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_GPIO_Init+0x300>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <HAL_GPIO_Init+0x300>)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_GPIO_Init+0x300>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002978:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_GPIO_Init+0x300>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_GPIO_Init+0x300>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_GPIO_Init+0x300>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f ae9d 	bne.w	80026f8 <HAL_GPIO_Init+0x10>
  }
}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010000 	.word	0x40010000
 80029d4:	48000400 	.word	0x48000400
 80029d8:	48000800 	.word	0x48000800
 80029dc:	48000c00 	.word	0x48000c00
 80029e0:	48001000 	.word	0x48001000
 80029e4:	48001400 	.word	0x48001400
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f806 	bl	8002a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d141      	bne.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a42:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d131      	bne.n	8002ab4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a50:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a56:	4a46      	ldr	r2, [pc, #280]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a60:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a68:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a70:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2232      	movs	r2, #50	; 0x32
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	0c9b      	lsrs	r3, r3, #18
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a86:	e002      	b.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d102      	bne.n	8002aa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f2      	bne.n	8002a88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d158      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e057      	b.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ac4:	e04d      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002acc:	d141      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ace:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d131      	bne.n	8002b40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae2:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af4:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2232      	movs	r2, #50	; 0x32
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b12:	e002      	b.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b26:	d102      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f2      	bne.n	8002b14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d112      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e011      	b.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b50:	e007      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40007000 	.word	0x40007000
 8002b74:	20000000 	.word	0x20000000
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8a:	6093      	str	r3, [r2, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e306      	b.n	80031bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d075      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_OscConfig+0x3e>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_OscConfig+0x44>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05b      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d157      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e2e1      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCC_OscConfig+0x74>
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a84      	ldr	r2, [pc, #528]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xb0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7e      	ldr	r2, [pc, #504]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7b      	ldr	r2, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xb0>
 8002c34:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a77      	ldr	r2, [pc, #476]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a74      	ldr	r2, [pc, #464]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fd fe80 	bl	8000958 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fd fe7c 	bl	8000958 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e2a6      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fd fe6c 	bl	8000958 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fd fe68 	bl	8000958 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e292      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c96:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d075      	beq.n	8002d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x136>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x13c>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11f      	bne.n	8002d18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x154>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e265      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	4946      	ldr	r1, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fdd9 	bl	80008c0 <HAL_InitTick>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d043      	beq.n	8002d9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e251      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d023      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fd fe14 	bl	8000958 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fd fe10 	bl	8000958 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e23a      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	492d      	ldr	r1, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
 8002d66:	e01a      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fd fdf0 	bl	8000958 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fd fdec 	bl	8000958 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e216      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1e0>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d041      	beq.n	8002e2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01c      	beq.n	8002dec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db8:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fd fdc9 	bl	8000958 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fd fdc5 	bl	8000958 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1ef      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ef      	beq.n	8002dca <HAL_RCC_OscConfig+0x22e>
 8002dea:	e020      	b.n	8002e2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fd fdac 	bl	8000958 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e02:	e00d      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fd fda8 	bl	8000958 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d906      	bls.n	8002e20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1d2      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	4b8c      	ldr	r3, [pc, #560]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ea      	bne.n	8002e04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e40:	4b84      	ldr	r3, [pc, #528]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2b4>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x2b6>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b7f      	ldr	r3, [pc, #508]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	4a7e      	ldr	r2, [pc, #504]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6593      	str	r3, [r2, #88]	; 0x58
 8002e62:	4b7c      	ldr	r3, [pc, #496]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	4b79      	ldr	r3, [pc, #484]	; (8003058 <HAL_RCC_OscConfig+0x4bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7e:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x4bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a75      	ldr	r2, [pc, #468]	; (8003058 <HAL_RCC_OscConfig+0x4bc>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fd fd65 	bl	8000958 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fd fd61 	bl	8000958 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e18b      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea4:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <HAL_RCC_OscConfig+0x4bc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d108      	bne.n	8002eca <HAL_RCC_OscConfig+0x32e>
 8002eb8:	4b66      	ldr	r3, [pc, #408]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a65      	ldr	r2, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec8:	e024      	b.n	8002f14 <HAL_RCC_OscConfig+0x378>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d110      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x358>
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	4a5e      	ldr	r2, [pc, #376]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef2:	e00f      	b.n	8002f14 <HAL_RCC_OscConfig+0x378>
 8002ef4:	4b57      	ldr	r3, [pc, #348]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	4a56      	ldr	r2, [pc, #344]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fd fd1c 	bl	8000958 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fd fd18 	bl	8000958 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e140      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ed      	beq.n	8002f24 <HAL_RCC_OscConfig+0x388>
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fd05 	bl	8000958 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fd fd01 	bl	8000958 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e129      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ed      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03c      	beq.n	800300e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa2:	4a2c      	ldr	r2, [pc, #176]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fd fcd4 	bl	8000958 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb4:	f7fd fcd0 	bl	8000958 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e0fa      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x418>
 8002fd4:	e01b      	b.n	800300e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fd fcb7 	bl	8000958 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fd fcb3 	bl	8000958 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0dd      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8003002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ef      	bne.n	8002fee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80d1 	beq.w	80031ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b0c      	cmp	r3, #12
 8003022:	f000 808b 	beq.w	800313c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d15e      	bne.n	80030ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a08      	ldr	r2, [pc, #32]	; (8003054 <HAL_RCC_OscConfig+0x4b8>)
 8003034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fd fc8d 	bl	8000958 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	e00c      	b.n	800305c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fd fc89 	bl	8000958 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d905      	bls.n	800305c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0b3      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ec      	bne.n	8003042 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003068:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <HAL_RCC_OscConfig+0x62c>)
 800306e:	4013      	ands	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6a11      	ldr	r1, [r2, #32]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003078:	3a01      	subs	r2, #1
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	4311      	orrs	r1, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003082:	0212      	lsls	r2, r2, #8
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800308a:	0852      	lsrs	r2, r2, #1
 800308c:	3a01      	subs	r2, #1
 800308e:	0552      	lsls	r2, r2, #21
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003096:	0852      	lsrs	r2, r2, #1
 8003098:	3a01      	subs	r2, #1
 800309a:	0652      	lsls	r2, r2, #25
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030a2:	06d2      	lsls	r2, r2, #27
 80030a4:	430a      	orrs	r2, r1
 80030a6:	4947      	ldr	r1, [pc, #284]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a44      	ldr	r2, [pc, #272]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd fc48 	bl	8000958 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fd fc44 	bl	8000958 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e06e      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x530>
 80030ea:	e066      	b.n	80031ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a2e      	ldr	r2, [pc, #184]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 800310a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fd fc20 	bl	8000958 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd fc1c 	bl	8000958 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e046      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x580>
 800313a:	e03e      	b.n	80031ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e039      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003148:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_OscConfig+0x628>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d12c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	3b01      	subs	r3, #1
 8003168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d123      	bne.n	80031b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11b      	bne.n	80031b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d113      	bne.n	80031b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	019f800c 	.word	0x019f800c

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e11e      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b8e      	ldr	r3, [pc, #568]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 020f 	bic.w	r2, r3, #15
 80031fa:	498c      	ldr	r1, [pc, #560]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b8a      	ldr	r3, [pc, #552]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e106      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d073      	beq.n	8003308 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d129      	bne.n	800327c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003228:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0f4      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003238:	f000 f966 	bl	8003508 <RCC_GetSysClockFreqFromPLLSource>
 800323c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4a7c      	ldr	r2, [pc, #496]	; (8003434 <HAL_RCC_ClockConfig+0x268>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d93f      	bls.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003246:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d033      	beq.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12f      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003266:	4b72      	ldr	r3, [pc, #456]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326e:	4a70      	ldr	r2, [pc, #448]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e024      	b.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d107      	bne.n	8003294 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003284:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0c6      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0be      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032a4:	f000 f8ce 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4a61      	ldr	r2, [pc, #388]	; (8003434 <HAL_RCC_ClockConfig+0x268>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d909      	bls.n	80032c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ba:	4a5d      	ldr	r2, [pc, #372]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c6:	4b5a      	ldr	r3, [pc, #360]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4957      	ldr	r1, [pc, #348]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd fb3e 	bl	8000958 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fd fb3a 	bl	8000958 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e095      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d1eb      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d023      	beq.n	800335c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003338:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4936      	ldr	r1, [pc, #216]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
 800335a:	e008      	b.n	800336e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d105      	bne.n	800336e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 8003368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336e:	4b2f      	ldr	r3, [pc, #188]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d21d      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 020f 	bic.w	r2, r3, #15
 8003384:	4929      	ldr	r1, [pc, #164]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800338c:	f7fd fae4 	bl	8000958 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fd fae0 	bl	8000958 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03b      	b.n	8003422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1ed      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4917      	ldr	r1, [pc, #92]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490f      	ldr	r1, [pc, #60]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f6:	f000 f825 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_ClockConfig+0x264>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490c      	ldr	r1, [pc, #48]	; (8003438 <HAL_RCC_ClockConfig+0x26c>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fa50 	bl	80008c0 <HAL_InitTick>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40022000 	.word	0x40022000
 8003430:	40021000 	.word	0x40021000
 8003434:	04c4b400 	.word	0x04c4b400
 8003438:	080048b8 	.word	0x080048b8
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d102      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e047      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d102      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e03e      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d136      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3301      	adds	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d10c      	bne.n	80034b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	4a16      	ldr	r2, [pc, #88]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	0a12      	lsrs	r2, r2, #8
 80034a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	617b      	str	r3, [r7, #20]
      break;
 80034b0:	e00c      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	0a12      	lsrs	r2, r2, #8
 80034c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
      break;
 80034ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0e5b      	lsrs	r3, r3, #25
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e001      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034ec:	693b      	ldr	r3, [r7, #16]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	00f42400 	.word	0x00f42400
 8003504:	016e3600 	.word	0x016e3600

08003508 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d10c      	bne.n	8003546 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800352c:	4a17      	ldr	r2, [pc, #92]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003536:	68d2      	ldr	r2, [r2, #12]
 8003538:	0a12      	lsrs	r2, r2, #8
 800353a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
    break;
 8003544:	e00c      	b.n	8003560 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	0a12      	lsrs	r2, r2, #8
 8003554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
    break;
 800355e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0e5b      	lsrs	r3, r3, #25
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800357a:	687b      	ldr	r3, [r7, #4]
}
 800357c:	4618      	mov	r0, r3
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40021000 	.word	0x40021000
 800358c:	016e3600 	.word	0x016e3600
 8003590:	00f42400 	.word	0x00f42400

08003594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800359c:	2300      	movs	r3, #0
 800359e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8098 	beq.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10d      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	4a3f      	ldr	r2, [pc, #252]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a39      	ldr	r2, [pc, #228]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ea:	f7fd f9b5 	bl	8000958 <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f0:	e009      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fd f9b1 	bl	8000958 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	74fb      	strb	r3, [r7, #19]
        break;
 8003604:	e005      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ef      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d159      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	d019      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd f971 	bl	8000958 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	e00b      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd f96d 	bl	8000958 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d902      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	74fb      	strb	r3, [r7, #19]
            break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ec      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a6:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	4903      	ldr	r1, [pc, #12]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036bc:	e008      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	74bb      	strb	r3, [r7, #18]
 80036c2:	e005      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d0:	7c7b      	ldrb	r3, [r7, #17]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4ba7      	ldr	r3, [pc, #668]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	4aa6      	ldr	r2, [pc, #664]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ee:	4ba1      	ldr	r3, [pc, #644]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f023 0203 	bic.w	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	499d      	ldr	r1, [pc, #628]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003710:	4b98      	ldr	r3, [pc, #608]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f023 020c 	bic.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4995      	ldr	r1, [pc, #596]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003732:	4b90      	ldr	r3, [pc, #576]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	498c      	ldr	r1, [pc, #560]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003754:	4b87      	ldr	r3, [pc, #540]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	4984      	ldr	r1, [pc, #528]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003776:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	497b      	ldr	r1, [pc, #492]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003798:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	4973      	ldr	r1, [pc, #460]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ba:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	496a      	ldr	r1, [pc, #424]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037dc:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4962      	ldr	r1, [pc, #392]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	4959      	ldr	r1, [pc, #356]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003820:	4b54      	ldr	r3, [pc, #336]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	4951      	ldr	r1, [pc, #324]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4948      	ldr	r1, [pc, #288]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003864:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4940      	ldr	r1, [pc, #256]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038aa:	4932      	ldr	r1, [pc, #200]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4924      	ldr	r1, [pc, #144]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d015      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	4916      	ldr	r1, [pc, #88]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a10      	ldr	r2, [pc, #64]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d019      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003962:	d109      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a02      	ldr	r2, [pc, #8]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396e:	60d3      	str	r3, [r2, #12]
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d015      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4926      	ldr	r1, [pc, #152]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a2:	d105      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ca:	4918      	ldr	r1, [pc, #96]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039f4:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	490a      	ldr	r1, [pc, #40]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e049      	b.n	8003ad6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fc fe50 	bl	80006fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fa5c 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x24>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e03c      	b.n	8003b7e <HAL_TIM_PWM_Start+0x9e>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d109      	bne.n	8003b1e <HAL_TIM_PWM_Start+0x3e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e02f      	b.n	8003b7e <HAL_TIM_PWM_Start+0x9e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d109      	bne.n	8003b38 <HAL_TIM_PWM_Start+0x58>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e022      	b.n	8003b7e <HAL_TIM_PWM_Start+0x9e>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d109      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x72>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e015      	b.n	8003b7e <HAL_TIM_PWM_Start+0x9e>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d109      	bne.n	8003b6c <HAL_TIM_PWM_Start+0x8c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e008      	b.n	8003b7e <HAL_TIM_PWM_Start+0x9e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0a6      	b.n	8003cd4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_PWM_Start+0xb6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b94:	e023      	b.n	8003bde <HAL_TIM_PWM_Start+0xfe>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0xc6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	e01b      	b.n	8003bde <HAL_TIM_PWM_Start+0xfe>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_PWM_Start+0xd6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	e013      	b.n	8003bde <HAL_TIM_PWM_Start+0xfe>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0xe6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc4:	e00b      	b.n	8003bde <HAL_TIM_PWM_Start+0xfe>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0xf6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd4:	e003      	b.n	8003bde <HAL_TIM_PWM_Start+0xfe>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2201      	movs	r2, #1
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fd72 	bl	80046d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_TIM_PWM_Start+0x1fc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_TIM_PWM_Start+0x148>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a39      	ldr	r2, [pc, #228]	; (8003ce0 <HAL_TIM_PWM_Start+0x200>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_TIM_PWM_Start+0x148>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a37      	ldr	r2, [pc, #220]	; (8003ce4 <HAL_TIM_PWM_Start+0x204>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_TIM_PWM_Start+0x148>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a36      	ldr	r2, [pc, #216]	; (8003ce8 <HAL_TIM_PWM_Start+0x208>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIM_PWM_Start+0x148>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a34      	ldr	r2, [pc, #208]	; (8003cec <HAL_TIM_PWM_Start+0x20c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_PWM_Start+0x148>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <HAL_TIM_PWM_Start+0x210>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_PWM_Start+0x14c>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_TIM_PWM_Start+0x14e>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_TIM_PWM_Start+0x1fc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d01d      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_TIM_PWM_Start+0x214>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a24      	ldr	r2, [pc, #144]	; (8003cf8 <HAL_TIM_PWM_Start+0x218>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <HAL_TIM_PWM_Start+0x21c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_TIM_PWM_Start+0x200>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_TIM_PWM_Start+0x204>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x1b2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <HAL_TIM_PWM_Start+0x210>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d115      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_TIM_PWM_Start+0x220>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b06      	cmp	r3, #6
 8003ca2:	d015      	beq.n	8003cd0 <HAL_TIM_PWM_Start+0x1f0>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003caa:	d011      	beq.n	8003cd0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	e008      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e000      	b.n	8003cd2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40013400 	.word	0x40013400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800
 8003cf0:	40015000 	.word	0x40015000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	00010007 	.word	0x00010007

08003d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0ff      	b.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b14      	cmp	r3, #20
 8003d2e:	f200 80f0 	bhi.w	8003f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003f13 	.word	0x08003f13
 8003d40:	08003f13 	.word	0x08003f13
 8003d44:	08003f13 	.word	0x08003f13
 8003d48:	08003dcd 	.word	0x08003dcd
 8003d4c:	08003f13 	.word	0x08003f13
 8003d50:	08003f13 	.word	0x08003f13
 8003d54:	08003f13 	.word	0x08003f13
 8003d58:	08003e0f 	.word	0x08003e0f
 8003d5c:	08003f13 	.word	0x08003f13
 8003d60:	08003f13 	.word	0x08003f13
 8003d64:	08003f13 	.word	0x08003f13
 8003d68:	08003e4f 	.word	0x08003e4f
 8003d6c:	08003f13 	.word	0x08003f13
 8003d70:	08003f13 	.word	0x08003f13
 8003d74:	08003f13 	.word	0x08003f13
 8003d78:	08003e91 	.word	0x08003e91
 8003d7c:	08003f13 	.word	0x08003f13
 8003d80:	08003f13 	.word	0x08003f13
 8003d84:	08003f13 	.word	0x08003f13
 8003d88:	08003ed1 	.word	0x08003ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f972 	bl	800407c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0208 	orr.w	r2, r2, #8
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0204 	bic.w	r2, r2, #4
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	619a      	str	r2, [r3, #24]
      break;
 8003dca:	e0a5      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f9ec 	bl	80041b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	619a      	str	r2, [r3, #24]
      break;
 8003e0c:	e084      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fa5f 	bl	80042d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0208 	orr.w	r2, r2, #8
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0204 	bic.w	r2, r2, #4
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	61da      	str	r2, [r3, #28]
      break;
 8003e4c:	e064      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fad1 	bl	80043fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	021a      	lsls	r2, r3, #8
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	61da      	str	r2, [r3, #28]
      break;
 8003e8e:	e043      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb44 	bl	8004524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003ece:	e023      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fb8e 	bl	80045f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f10:	e002      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
      break;
 8003f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a46      	ldr	r2, [pc, #280]	; (8004058 <TIM_Base_SetConfig+0x12c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d017      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d013      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a43      	ldr	r2, [pc, #268]	; (800405c <TIM_Base_SetConfig+0x130>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00f      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a42      	ldr	r2, [pc, #264]	; (8004060 <TIM_Base_SetConfig+0x134>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a41      	ldr	r2, [pc, #260]	; (8004064 <TIM_Base_SetConfig+0x138>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a40      	ldr	r2, [pc, #256]	; (8004068 <TIM_Base_SetConfig+0x13c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a3f      	ldr	r2, [pc, #252]	; (800406c <TIM_Base_SetConfig+0x140>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d108      	bne.n	8003f86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a33      	ldr	r2, [pc, #204]	; (8004058 <TIM_Base_SetConfig+0x12c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d023      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d01f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a30      	ldr	r2, [pc, #192]	; (800405c <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d017      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <TIM_Base_SetConfig+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	; (8004070 <TIM_Base_SetConfig+0x144>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2c      	ldr	r2, [pc, #176]	; (8004074 <TIM_Base_SetConfig+0x148>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <TIM_Base_SetConfig+0x14c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a26      	ldr	r2, [pc, #152]	; (800406c <TIM_Base_SetConfig+0x140>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <TIM_Base_SetConfig+0x12c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a14      	ldr	r2, [pc, #80]	; (8004068 <TIM_Base_SetConfig+0x13c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a14      	ldr	r2, [pc, #80]	; (8004070 <TIM_Base_SetConfig+0x144>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_Base_SetConfig+0x148>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <TIM_Base_SetConfig+0x14c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0d      	ldr	r2, [pc, #52]	; (800406c <TIM_Base_SetConfig+0x140>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800
 8004064:	40000c00 	.word	0x40000c00
 8004068:	40013400 	.word	0x40013400
 800406c:	40015000 	.word	0x40015000
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0302 	bic.w	r3, r3, #2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a30      	ldr	r2, [pc, #192]	; (8004198 <TIM_OC1_SetConfig+0x11c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_OC1_SetConfig+0x88>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a2f      	ldr	r2, [pc, #188]	; (800419c <TIM_OC1_SetConfig+0x120>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00f      	beq.n	8004104 <TIM_OC1_SetConfig+0x88>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <TIM_OC1_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC1_SetConfig+0x88>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <TIM_OC1_SetConfig+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC1_SetConfig+0x88>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <TIM_OC1_SetConfig+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC1_SetConfig+0x88>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <TIM_OC1_SetConfig+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10c      	bne.n	800411e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0308 	bic.w	r3, r3, #8
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <TIM_OC1_SetConfig+0x11c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <TIM_OC1_SetConfig+0xd2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <TIM_OC1_SetConfig+0x120>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00f      	beq.n	800414e <TIM_OC1_SetConfig+0xd2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <TIM_OC1_SetConfig+0x124>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_OC1_SetConfig+0xd2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <TIM_OC1_SetConfig+0x128>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <TIM_OC1_SetConfig+0xd2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <TIM_OC1_SetConfig+0x12c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_OC1_SetConfig+0xd2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <TIM_OC1_SetConfig+0x130>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d111      	bne.n	8004172 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800415c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40013400 	.word	0x40013400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800
 80041ac:	40015000 	.word	0x40015000

080041b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <TIM_OC2_SetConfig+0x110>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_OC2_SetConfig+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <TIM_OC2_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC2_SetConfig+0x74>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <TIM_OC2_SetConfig+0x118>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10d      	bne.n	8004240 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <TIM_OC2_SetConfig+0x110>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <TIM_OC2_SetConfig+0xc0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <TIM_OC2_SetConfig+0x114>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00f      	beq.n	8004270 <TIM_OC2_SetConfig+0xc0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <TIM_OC2_SetConfig+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_OC2_SetConfig+0xc0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <TIM_OC2_SetConfig+0x120>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_OC2_SetConfig+0xc0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <TIM_OC2_SetConfig+0x124>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_OC2_SetConfig+0xc0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <TIM_OC2_SetConfig+0x118>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d113      	bne.n	8004298 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40015000 	.word	0x40015000
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800

080042d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2b      	ldr	r2, [pc, #172]	; (80043e4 <TIM_OC3_SetConfig+0x10c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_OC3_SetConfig+0x72>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <TIM_OC3_SetConfig+0x110>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_OC3_SetConfig+0x72>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a29      	ldr	r2, [pc, #164]	; (80043ec <TIM_OC3_SetConfig+0x114>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10d      	bne.n	8004366 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <TIM_OC3_SetConfig+0x10c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <TIM_OC3_SetConfig+0xbe>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <TIM_OC3_SetConfig+0x110>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_OC3_SetConfig+0xbe>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <TIM_OC3_SetConfig+0x118>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_OC3_SetConfig+0xbe>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <TIM_OC3_SetConfig+0x11c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_OC3_SetConfig+0xbe>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <TIM_OC3_SetConfig+0x120>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC3_SetConfig+0xbe>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <TIM_OC3_SetConfig+0x114>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d113      	bne.n	80043be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40015000 	.word	0x40015000
 80043f0:	40014000 	.word	0x40014000
 80043f4:	40014400 	.word	0x40014400
 80043f8:	40014800 	.word	0x40014800

080043fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a2c      	ldr	r2, [pc, #176]	; (800450c <TIM_OC4_SetConfig+0x110>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d007      	beq.n	8004470 <TIM_OC4_SetConfig+0x74>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a2b      	ldr	r2, [pc, #172]	; (8004510 <TIM_OC4_SetConfig+0x114>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC4_SetConfig+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <TIM_OC4_SetConfig+0x118>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10d      	bne.n	800448c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1f      	ldr	r2, [pc, #124]	; (800450c <TIM_OC4_SetConfig+0x110>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_OC4_SetConfig+0xc0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <TIM_OC4_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_OC4_SetConfig+0xc0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <TIM_OC4_SetConfig+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_OC4_SetConfig+0xc0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <TIM_OC4_SetConfig+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_OC4_SetConfig+0xc0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <TIM_OC4_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC4_SetConfig+0xc0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <TIM_OC4_SetConfig+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d113      	bne.n	80044e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40015000 	.word	0x40015000
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <TIM_OC5_SetConfig+0xbc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <TIM_OC5_SetConfig+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <TIM_OC5_SetConfig+0xc0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_OC5_SetConfig+0x82>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <TIM_OC5_SetConfig+0xc4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_OC5_SetConfig+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <TIM_OC5_SetConfig+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_OC5_SetConfig+0x82>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <TIM_OC5_SetConfig+0xcc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_OC5_SetConfig+0x82>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <TIM_OC5_SetConfig+0xd0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d109      	bne.n	80045ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800
 80045f4:	40015000 	.word	0x40015000

080045f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800463e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	051b      	lsls	r3, r3, #20
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <TIM_OC6_SetConfig+0xc0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <TIM_OC6_SetConfig+0x84>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <TIM_OC6_SetConfig+0xc4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00f      	beq.n	800467c <TIM_OC6_SetConfig+0x84>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <TIM_OC6_SetConfig+0xc8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00b      	beq.n	800467c <TIM_OC6_SetConfig+0x84>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <TIM_OC6_SetConfig+0xcc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_OC6_SetConfig+0x84>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <TIM_OC6_SetConfig+0xd0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_OC6_SetConfig+0x84>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC6_SetConfig+0xd4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d109      	bne.n	8004690 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	029b      	lsls	r3, r3, #10
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800
 80046cc:	40015000 	.word	0x40015000

080046d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	401a      	ands	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1a      	ldr	r2, [r3, #32]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004730:	2302      	movs	r3, #2
 8004732:	e074      	b.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a34      	ldr	r2, [pc, #208]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d009      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a33      	ldr	r2, [pc, #204]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a31      	ldr	r2, [pc, #196]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004778:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d022      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d01d      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d018      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40015000 	.word	0x40015000
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40014000 	.word	0x40014000

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	4d0d      	ldr	r5, [pc, #52]	; (8004880 <__libc_init_array+0x38>)
 800484c:	4c0d      	ldr	r4, [pc, #52]	; (8004884 <__libc_init_array+0x3c>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	2600      	movs	r6, #0
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	4d0b      	ldr	r5, [pc, #44]	; (8004888 <__libc_init_array+0x40>)
 800485a:	4c0c      	ldr	r4, [pc, #48]	; (800488c <__libc_init_array+0x44>)
 800485c:	f000 f820 	bl	80048a0 <_init>
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	2600      	movs	r6, #0
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	f855 3b04 	ldr.w	r3, [r5], #4
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	080048c8 	.word	0x080048c8
 8004884:	080048c8 	.word	0x080048c8
 8004888:	080048c8 	.word	0x080048c8
 800488c:	080048cc 	.word	0x080048cc

08004890 <memset>:
 8004890:	4402      	add	r2, r0
 8004892:	4603      	mov	r3, r0
 8004894:	4293      	cmp	r3, r2
 8004896:	d100      	bne.n	800489a <memset+0xa>
 8004898:	4770      	bx	lr
 800489a:	f803 1b01 	strb.w	r1, [r3], #1
 800489e:	e7f9      	b.n	8004894 <memset+0x4>

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
